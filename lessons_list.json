[
  {
    "name": "Introduction to Mars Rover Operations",
    "description": "Getting familiar with the Mars rover platform and basic control operations.",
    "sn": 0,
    "str_id": "module_0",
    "lessons": [
      {
        "str_id": "first_contact",
        "name": "First Contact",
        "url": "lessons/module_1/first_contact.md",
        "sn": 0,
        "description": "Introduction to Mars rover systems, platform overview, and basic control interface familiarization.",
        "template": "// Include the Mars rover control library\n#include <marsRover.h>\n\nvoid setup() {\n\t// System initialization and basic controls demonstration\n\trover.initializeSystems();\n\trover.checkSensors();\n\trover.displayStatus();\n\t\n\t// Basic movement demonstration\n\trover.moveForward(20);\n\trover.rotate(45);\n\trover.moveForward(20);\n}\n\nvoid loop() {\n\t// System monitoring\n\trover.monitorSystems();\n}"
      },
      {
        "str_id": "landing_simulation",
        "name": "Mars Landing Simulation",
        "url": "lessons/module_1/landing_simulation.md",
        "sn": 1,
        "description": "Programming the rover's landing sequence and initial movement patterns.",
        "template": "#include <marsRover.h>\n\nvoid setup() {\n\t// Landing sequence simulation\n\trover.initializeLandingSequence();\n\t\n\t// Basic movement pattern\n\trover.moveForwardWithPrecision(50);\n\trover.checkPosition();\n\trover.adjustOrientation();\n}\n\nvoid loop() {\n\trover.monitorEnvironment();\n}"
      },
      {
        "str_id": "operator_certification",
        "url": "lessons/module_1/operator_certification.md",
        "sn": 2,
        "name": "Rover Operator Certification",
        "description": "Complete certification course demonstrating mastery of basic rover controls.",
        "template": "#include <marsRover.h>\n\nvoid setup() {\n\t// Certification course sequence\n\trover.startCertification();\n\t\n\t// Your certification course code here\n\t// Demonstrate precise movement and control\n}\n\nvoid loop() {\n\trover.monitorPerformance();\n\trover.logResults();\n}"
      }
    ]
  },
  {
    "name": "Basic Navigation Systems",
    "description": "Advanced movement control and navigation techniques for Mars terrain.",
    "sn": 1,
    "str_id": "module_1",
    "lessons": [
      {
        "str_id": "crater_navigation",
        "url": "lessons/module_1/crater_navigation.md",
        "sn": 3,
        "name": "Crater Navigation",
        "description": "Programming precise movements for navigating crater edges and challenging terrain.",
        "template": "#include <marsRover.h>\n\nvoid setup() {\n\t// Crater edge navigation sequence\n\trover.initializeNavigationSystems();\n\trover.enableTerrainAnalysis();\n\t\n\t// Your crater navigation code here\n}\n\nvoid loop() {\n\trover.monitorTerrain();\n\trover.adjustTrajectory();\n}"
      },
      {
        "str_id": "maneuvering",
        "url": "https://raw.githubusercontent.com/autolab-fi/line-robot-curriculum/main/lessons/module_1/maneuvering.md",
        "sn": 4,
        "name": "Maneuvering",
        "description": "Turning right and left in place. Task: Read data from a file and write it to another.",
        "template": "#include <lineRobot.h>\nvoid setup() {\n\t// Write functions to rotate robot here\n}\nvoid loop(){\n}"
      },
      {
        "str_id": "long_distance_race",
        "url": "https://raw.githubusercontent.com/autolab-fi/line-robot-curriculum/main/lessons/module_1/long_distance_race.md",
        "sn": 5,
        "name": "Fruit Ninja",
        "description": "Writing a program with a sequence of commands to move along a trajectory depicted in the diagram.",
        "template": "#include <lineRobot.h>\nvoid setup() {\n\t// Write sequnce of movement functions here\n}\nvoid loop(){\n}"
      }
    ]
  },
  {
    "name": "Mars Environmental Systems",
    "description": "Control and monitor Mars rover's environmental and signaling systems.",
    "sn": 2,
    "str_id": "module_2",
    "lessons": [
      {
        "str_id": "visibility_systems",
        "url": "lessons/module_2/visibility_systems.md",
        "sn": 6,
        "name": "Visibility Systems",
        "description": "Program rover's visibility systems for different Mars lighting conditions and dust storms.",
        "template": "#include <marsRover.h>\nvoid setup() {\n\t// Initialize visibility systems\n\trover.initializeVisibilitySystems();\n\t\n\t// Configure light sensors\n\trover.configureLightSensors();\n}\n\nvoid loop() {\n\t// Monitor ambient conditions and adjust lighting\n\trover.monitorLightConditions();\n\trover.adjustVisibilitySystems();\n}"
      },
      {
        "str_id": "emergency_signals",
        "url": "lessons/module_2/emergency_signals.md",
        "sn": 7,
        "name": "Emergency Signaling",
        "description": "Implement emergency signaling patterns for various Mars mission scenarios.",
        "template": "#include <marsRover.h>\nvoid setup() {\n\t// Initialize emergency systems\n\trover.initializeEmergencySystems();\n\t\n\t// Configure signal patterns\n\trover.configureEmergencySignals();\n}\n\nvoid loop() {\n\t// Monitor conditions and trigger appropriate signals\n\trover.checkEnvironmentalStatus();\n\trover.updateEmergencySignals();\n}"
      }
    ]
  },
  {
    "name": "Mars Terrain Navigation",
    "description": "Advanced movement systems for Mars terrain navigation and obstacle handling.",
    "sn": 3,
    "str_id": "module_3",
    "lessons": [
      {
        "str_id": "terrain_drive",
        "url": "lessons/module_3/terrain_drive.md",
        "sn": 8,
        "name": "All-Terrain Drive System",
        "description": "Master the rover's advanced drive system for various Mars terrain types.",
        "template": "#include <marsRover.h>\nvoid setup() {\n\t// Initialize terrain systems\n\trover.initializeTerrainSystems();\n\t\n\t// Configure drive parameters\n\trover.configureTerrainResponse();\n}\n\nvoid loop() {\n\t// Monitor and adjust to terrain\n\trover.analyzeTerrain();\n\trover.adjustDriveSystem();\n}"
      },
      {
        "str_id": "obstacle_navigation",
        "url": "lessons/module_3/obstacle_navigation.md",
        "sn": 9,
        "name": "Obstacle Navigation",
        "description": "Program advanced obstacle detection and navigation routines.",
        "template": "#include <marsRover.h>\nvoid setup() {\n\t// Initialize obstacle systems\n\trover.initializeObstacleSystems();\n\t\n\t// Configure detection parameters\n\trover.configureObstacleDetection();\n}\n\nvoid loop() {\n\t// Monitor for obstacles and navigate\n\trover.scanForObstacles();\n\trover.executeAvoidanceManeuver();\n}"
      },
      {
        "str_id": "power_optimization",
        "url": "lessons/module_3/power_optimization.md",
        "sn": 10,
        "name": "Power Optimization",
        "description": "Implement efficient power usage strategies for extended Mars operations.",
        "template": "#include <marsRover.h>\n\nvoid setup() {\n\t// Initialize power management\n\trover.initializePowerSystems();\n\t\n\t// Configure power profiles\n\trover.configurePowerProfiles();\n}\n\nvoid loop() {\n\t// Monitor and optimize power usage\n\trover.monitorPowerLevels();\n\trover.optimizePowerUsage();\n}"
      }
    ]
  },
  {
    "name": "Position Tracking Systems",
    "description": "Master Mars rover position tracking and movement precision using advanced sensor systems.",
    "sn": 4,
    "str_id": "module_4",
    "lessons": [
      {
        "str_id": "position_tracking",
        "name": "Position Tracking",
        "url": "lessons/module_4/position_tracking.md",
        "sn": 11,
        "description": "Implement precise position tracking for Mars rover navigation and mapping.",
        "template": "#include <marsRover.h>\n\nvoid setup() {\n\t// Initialize tracking systems\n\trover.initializePositionSystems();\n\trover.resetPositionTracking();\n\n\t// Configure tracking parameters\n\trover.setTrackingPrecision(HIGH);\n\n\t// Start position logging\n\trover.logPosition(\"START_POSITION\");\n\n\t// Test movement sequence\n\trover.moveWithTracking(50, FORWARD);\n\trover.logPosition(\"CHECKPOINT_1\");\n\n\trover.rotateWithTracking(90, RIGHT);\n\trover.logPosition(\"CHECKPOINT_2\");\n\n\trover.moveWithTracking(30, FORWARD);\n\trover.logPosition(\"FINAL_POSITION\");\n}\n\nvoid loop() {\n\t// Continuous position monitoring\n\trover.monitorPosition();\n\trover.updateNavigationData();\n}"
      },
      {
        "str_id": "movement_precision",
        "name": "Movement Precision",
        "url": "lessons/module_4/movement_precision.md",
        "sn": 12,
        "description": "Develop precise movement control for delicate Mars surface operations.",
        "template": "#include <marsRover.h>\n\nvoid setup() {\n\t// Initialize precision systems\n\trover.initializePrecisionSystems();\n\t\n\t// Configure movement parameters\n\trover.setPrecisionLevel(HIGH);\n}\n\nvoid loop() {\n\t// Monitor and adjust movement precision\n\trover.trackMovementAccuracy();\n\trover.adjustMovementParameters();\n}"
      }
    ]
  },
  {
    "name": "Line Sensor Introduction",
    "description": "Understanding how IR line sensors work and detecting black lines using the Octoliner sensor array.",
    "sn": 5,
    "str_id": "module_6",
    "lessons": [
      {
        "str_id": "line_senosor_intro",
        "name": "Line Sensor and Black Line Detection",
        "url": "https://raw.githubusercontent.com/autolab-fi/line-robot-curriculum/main/lessons/module_6/line_senosor_intro.md",
        "sn": 12,
        "description": "This lesson focuses on understanding how an Octoliner sensor detects black lines using IR sensors and implementing black line detection.",
        "template": "#include <Octoliner.h>\n\n// I2C Address (default 42)\nOctoliner octoliner(42);\n\n// Black threshold for detection\nconst int MY_BLACK_THRESHOLD = 100;\n\nvoid setup() {\n    octoliner.begin();\n    octoliner.setSensitivity(245);  // Adjust sensitivity if needed\n}\n\nvoid loop() {\n    int value1 = octoliner.analogRead(1);\n}"
      }
    ]
  },
  {
    "name": "Programming Fundamentals",
    "description": "Essential programming concepts including variables, conditional statements, loops, and arrays for robot control.",
    "sn": 6,
    "str_id": "module_7",
    "lessons": [
      {
        "str_id": "variables_conditionals",
        "name": "Introduction to Variables and Conditional Statements",
        "url": "https://raw.githubusercontent.com/autolab-fi/line-robot-curriculum/main/lessons/module_7/Introduction%20to%20Variables%20and%20Conditional%20Statements.md",
        "sn": 13,
        "description": "Learn how to declare and use variables in programming, and apply conditional logic using if, else if, and else statements.",
        "template": "#include <Octoliner.h>\n#include <lineRobot.h>\n\n// I2C Address (default 42)\nOctoliner octoliner(42);\n\nvoid setup() {\n    octoliner.begin();\n    octoliner.setSensitivity(245);\n}\n\nvoid loop() {\n    // Read values from all sensors (0 - 7)\n    int value_0 = octoliner.analogRead(0);\n    int value_1 = octoliner.analogRead(1);\n\n    // YOUR CODE HERE:\n    // Add if-else if-else statements to determine which sensor(s) detect the line\n\n}"
      },
      {
        "str_id": "loops_conditional_logic",
        "name": "Loops and Conditional Logic",
        "url": "https://raw.githubusercontent.com/autolab-fi/line-robot-curriculum/main/lessons/module_7/Loops%20and%20Conditional%20Logic.md",
        "sn": 14,
        "description": "Learn how to repeat actions using for and while loops combined with conditional statements.",
        "template": "#include <Octoliner.h>\n#include <lineRobot.h>\n\n// I2C Address (default 42)\nOctoliner octoliner(42);\n\nvoid setup() {\n    octoliner.begin();\n    octoliner.setSensitivity(245);\n}\n\nvoid loop() {\n    // YOUR CODE HERE:\n    // Use a loop to read and print values from all 8 sensors (0-7)\n\n}"
      },
      {
        "str_id": "arrays_data_processing",
        "name": "Arrays and Processing Data with Loops",
        "url": "https://raw.githubusercontent.com/autolab-fi/line-robot-curriculum/main/lessons/module_7/Arrays%20and%20Processing%20Data%20with%20Loops.md",
        "sn": 15,
        "description": "Understand how to use arrays to store and analyze sensor data with systematic data collection.",
        "template": "#include <Octoliner.h>\n#include <lineRobot.h>\n\n// I2C Address (default 42)\nOctoliner octoliner(42);\nconst int MY_BLACK_THRESHOLD = 100;\n\nvoid setup() {\n    octoliner.begin();\n    octoliner.setSensitivity(245);\n\n    // YOUR CODE HERE:\n    // 1. Create three arrays to store 8 sensor readings each\n    // 2. Take measurements at different robot positions\n    // 3. Send all data systematically using printMQTT()\n\n}\n\nvoid loop() {\n    // Empty - all work done in setup()\n}"
      }
    ]
  },
  {
    "name": "Advanced Autonomous Navigation",
    "description": "Implement sophisticated control systems for autonomous Mars exploration using various controller types.",
    "sn": 7,
    "str_id": "module_8",
    "lessons": [
      {
        "str_id": "basic_autonomous_control",
        "name": "Basic Autonomous Control",
        "url": "lessons/module_8/basic_autonomous_control.md",
        "sn": 16,
        "description": "Implement basic autonomous control systems for Mars rover navigation.",
        "template": "#include <marsRover.h>\n\n// Initialize controller parameters\nfloat baseSpeed = 30;\nfloat navigationThreshold = 100;\n\nvoid setup() {\n    rover.initializeAutonomousSystems();\n    rover.setNavigationParameters(baseSpeed, navigationThreshold);\n}\n\nvoid loop() {\n    // Read terrain and navigation data\n    rover.updateTerrainData();\n    rover.processNavigationInput();\n    \n    // Apply basic autonomous control\n    rover.executeAutonomousNavigation();\n    rover.monitorPerformance();\n}"
      },
      {
        "str_id": "advanced_control_systems",
        "name": "Advanced Control Systems",
        "url": "lessons/module_8/advanced_control_systems.md",
        "sn": 17,
        "description": "Implement sophisticated P and PI controllers for precise Mars navigation.",
        "template": "#include <marsRover.h>\n\nvoid setup() {\n    // Initialize advanced control systems\n    rover.initializeAdvancedControl();\n    rover.configureControlParameters();\n}\n\nvoid loop() {\n    // Execute advanced control algorithms\n    rover.processNavigationData();\n    rover.executeAdvancedControl();\n}"
      },
      {
        "str_id": "autonomous_exploration",
        "name": "Autonomous Exploration",
        "url": "lessons/module_8/autonomous_exploration.md",
        "sn": 18,
        "description": "Develop complete autonomous exploration capabilities using advanced PID control.",
        "template": "#include <marsRover.h>\n\nvoid setup() {\n    // Initialize exploration systems\n    rover.initializeExplorationSystems();\n    rover.configurePIDParameters();\n}\n\nvoid loop() {\n    // Execute autonomous exploration\n    rover.updateExplorationData();\n    rover.executeAutonomousExploration();\n    rover.logExplorationData();\n}"
      }
    ]
  }
]
